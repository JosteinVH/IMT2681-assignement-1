package main
import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"
	."jvh_local/TEST/api"
	."jvh_local/TEST/data"
)


func TestInfoHandler(t *testing.T) {

	req, err := http.NewRequest("GET", "http://localhost:8080/igcinfo/api/",nil)

	if err != nil {
		t.Fatalf("could not create request: %v", err)
	}
	rec := httptest.NewRecorder()

	InfoHandler(rec,req)

	// Returns response generated by handler
	res := rec.Result()
	defer res.Body.Close()
	if res.StatusCode != http.StatusOK {
		t.Errorf("Expected status %v: got %v", http.StatusOK,res.Status)
	}

	var info Info

	if err := json.NewDecoder(res.Body).Decode(&info); err != nil {
		t.Fatalf("Could not decode json: %v", err)
	}

	if (info.Uptime != "PT0S") {
		t.Errorf("Expected value: PT0S  , got:  %v",info.Uptime)
	}

	if info.Info != "Service for IGC tracks." {
		t.Errorf("Expected value: Service for IGC tracks.: got %v",info.Info)
	}

	if info.Version != "v1" {
		t.Errorf("Expected value: v1,  got: %v ", info.Version)
	}
}


func TestGetAPI(t *testing.T) {

	req, err := http.NewRequest("GET", "http://localhost:8080/igcinfo/api/igc", nil)

	if err != nil {
		t.Errorf("Could not create request: %v", err)
	}

	if req.Method != "GET" {
		t.Fatalf("Expected method GET, got %v", req.Method)
	}


	rec := httptest.NewRecorder()

	GetAPI(rec,req)

	res := rec.Result()
	defer res.Body.Close()
	if res.StatusCode != http.StatusOK {
		t.Errorf("Expected statuscode %v, got %v", http.StatusOK, res.StatusCode)
	}
	
	var testId[] int
	
	if err := json.NewDecoder(res.Body).Decode(&testId); err != nil {
		t.Fatalf("Could not parse json %v", err)
	}

	if len(testId) != 0 {
		t.Fatalf("Expected length %v, got %v", 0, len(testId	))
	}

}

func TestPostApi(t *testing.T){
	tc := Url{
		 "http://skypolaris.org/wp-content/uploads/IGS%20Files/Madrid%20to%20Jerez.igc",
	}

	//expected := 1

	content, err  := json.Marshal(tc)
	if err != nil {
		t.Errorf("Could not marshal data %v", err)
	}

	body := ioutil.NopCloser(bytes.NewBufferString(string(content)))


	req, err := http.NewRequest("POST", "http://localhost:8080/igcinfo/api/igc", body)
	if err != nil {
		t.Errorf("Could not create request, %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	rec := httptest.NewRecorder()

	http.HandlerFunc(PostAPI).ServeHTTP(rec,req)

	if rec.Code != http.StatusOK{
		t.Fatalf("Expected statuscode %v, got: %v", http.StatusOK, rec.Code)
	}

	data, err := ioutil.ReadAll(rec.Body)
	if err != nil {
		t.Fatalf("Could not read body %v", err.Error())
	}

	var testData Url

	err = json.Unmarshal(data, &testData)
	if err != nil {
		t.Errorf("Error during unmarshal %v", err.Error())
	}

	if testData.Url != ""{
		t.Errorf("Expected somedata, Got: %v", testData.Url,)
	}
}

/*
func TestApiHandler(t *testing.T) {
	req, err := http.NewRequest("", "http://localhost:8080/api/igc",xXSOMETHINGXx)
	if err != nil {
		t.Fatalf("Could not create request: %v", err)
	}

	rec := httptest.NewRecorder()

	ApiHandler(rec,req)

	if req.Method != "POST" {
		t.Errorf("Something went wrong with DELETE %v", req.Method)
	}
	res := rec.Result()
	if res.StatusCode != http.StatusOK {
		t.Errorf("Expected status %v: got %v", http.StatusOK, res.StatusCode)
	}

}
*/